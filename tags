!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BATCH_SIZE	Code/1_serial_network/serial_test.cpp	/^#define BATCH_SIZE /;"	d	file:
BATCH_SIZE	Code/1_serial_network/serial_test2.cpp	/^#define BATCH_SIZE /;"	d	file:
CXX	Code/1_serial_network/makefile	/^CXX = g++$/;"	m
CXX	Code/2_cuda_network/Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Code/1_serial_network/makefile	/^CXXFLAGS = -std=c++11 -Wall -O0$/;"	m
CXXFLAGS	Code/2_cuda_network/Makefile	/^CXXFLAGS=-std=c++11 -O0$/;"	m
Data Parallelism	Proposal/Proposal.tex	/^\\subsection{Data Parallelism}$/;"	b
Data Parallelism	Report/Proposal.tex	/^\\subsection{Data Parallelism}$/;"	b
Dataset	Code/1_serial_network/utils/dataset.cpp	/^Dataset::Dataset(const char* fname, int batch_size) {$/;"	f	class:Dataset
Dataset	Code/1_serial_network/utils/dataset.hpp	/^class Dataset {$/;"	c
Dataset	Code/2_cuda_network/utils/dataset.cpp	/^Dataset::Dataset(const char* fname, int batch_size) {$/;"	f	class:Dataset
Dataset	Code/2_cuda_network/utils/dataset.hpp	/^class Dataset {$/;"	c
Dataset	Code/5_rework_CUDA/utils/dataset.cpp	/^Dataset::Dataset(char* fname, int batch_size) {$/;"	f	class:Dataset
Dataset	Code/5_rework_CUDA/utils/dataset.hpp	/^class Dataset {$/;"	c
Directions of investigation expected results	Proposal/Proposal.tex	/^\\section{Directions of investigation \/ expected results}$/;"	s
Directions of investigation expected results	Report/Proposal.tex	/^\\section{Directions of investigation \/ expected results}$/;"	s
HI_r	Code/1_serial_network/utils/matrix.hpp	/^#define HI_r /;"	d
HI_r	Code/5_rework_CUDA/utils/matrix.hpp	/^#define HI_r /;"	d
Introduction background	Proposal/Proposal.tex	/^\\section{Introduction \/ background}$/;"	s
Introduction background	Report/Proposal.tex	/^\\section{Introduction \/ background}$/;"	s
LEARN_RATE	Code/1_serial_network/serial_test.cpp	/^#define LEARN_RATE /;"	d	file:
LEARN_RATE	Code/1_serial_network/serial_test2.cpp	/^#define LEARN_RATE /;"	d	file:
LO_r	Code/1_serial_network/utils/matrix.hpp	/^#define LO_r /;"	d
LO_r	Code/5_rework_CUDA/utils/matrix.hpp	/^#define LO_r /;"	d
Layer	Code/1_serial_network/layer.cpp	/^Layer::Layer(int node_count, layer_pos lpp, Layer* previous_layer) {$/;"	f	class:Layer
Layer	Code/1_serial_network/layer.hpp	/^class Layer {$/;"	c
Layer	Code/2_cuda_network/layer.hpp	/^class Layer {$/;"	c
Layer	Code/5_rework_CUDA/layer.hpp	/^class Layer {$/;"	c
MIN_ERROR	Code/1_serial_network/serial_test.cpp	/^#define MIN_ERROR /;"	d	file:
MIN_ERROR	Code/1_serial_network/serial_test2.cpp	/^#define MIN_ERROR /;"	d	file:
MSE	Code/1_serial_network/layer.cpp	/^float MSE(float* v1, float* v2, int num) {$/;"	f
Model Parallelism	Proposal/Proposal.tex	/^\\subsection{Model Parallelism}$/;"	b
Model Parallelism	Report/Proposal.tex	/^\\subsection{Model Parallelism}$/;"	b
NUM_EPOCHS	Code/1_serial_network/serial_test.cpp	/^#define NUM_EPOCHS /;"	d	file:
NUM_EPOCHS	Code/1_serial_network/serial_test2.cpp	/^#define NUM_EPOCHS /;"	d	file:
NUM_INPUTS	Code/1_serial_network/serial_test.cpp	/^#define NUM_INPUTS /;"	d	file:
NUM_INPUTS	Code/1_serial_network/serial_test2.cpp	/^#define NUM_INPUTS /;"	d	file:
NUM_OUTPUTS	Code/1_serial_network/serial_test.cpp	/^#define NUM_OUTPUTS /;"	d	file:
NUM_OUTPUTS	Code/1_serial_network/serial_test2.cpp	/^#define NUM_OUTPUTS /;"	d	file:
NVCC	Code/2_cuda_network/Makefile	/^NVCC=nvcc$/;"	m
Network	Code/5_rework_CUDA/network_scratch/network.cpp	/^Network::Network(int num_l, int* node_list, layer_type* lt, int num_batches) {$/;"	f	class:Network
Network	Code/5_rework_CUDA/network_scratch/network.hpp	/^class Network {$/;"	c
Problem formulation motivation	Proposal/Proposal.tex	/^\\section{Problem formulation \/ motivation}$/;"	s
Problem formulation motivation	Report/Proposal.tex	/^\\section{Problem formulation \/ motivation}$/;"	s
RELU	Code/5_rework_CUDA/network_scratch/network.hpp	/^typedef enum {RELU, Sigmoid, Softmax} layer_type ;$/;"	e	enum:__anon1
RF_HI	Code/1_serial_network/matrix.hpp	/^#define RF_HI /;"	d
RF_HI	Code/2_cuda_network/matrix.hpp	/^#define RF_HI /;"	d
RF_HI	Code/5_rework_CUDA/matrix.hpp	/^#define RF_HI /;"	d
RF_LO	Code/1_serial_network/matrix.hpp	/^#define RF_LO /;"	d
RF_LO	Code/2_cuda_network/matrix.hpp	/^#define RF_LO /;"	d
RF_LO	Code/5_rework_CUDA/matrix.hpp	/^#define RF_LO /;"	d
Sigmoid	Code/5_rework_CUDA/network_scratch/network.hpp	/^typedef enum {RELU, Sigmoid, Softmax} layer_type ;$/;"	e	enum:__anon1
Softmax	Code/5_rework_CUDA/network_scratch/network.hpp	/^typedef enum {RELU, Sigmoid, Softmax} layer_type ;$/;"	e	enum:__anon1
_GLIBCXX_USE_CXX11_ABI	Code/2_cuda_network/utils/dataset.cpp	/^#define _GLIBCXX_USE_CXX11_ABI /;"	d	file:
_GLIBCXX_USE_CXX11_ABI	Code/5_rework_CUDA/utils/dataset.cpp	/^#define _GLIBCXX_USE_CXX11_ABI /;"	d	file:
average_err	Code/5_rework_CUDA/network_scratch/network.cpp	/^float average_err(float* errors, int num) {$/;"	f
back_prop	Code/1_serial_network/layer.cpp	/^void Layer::back_prop(float* targets) {$/;"	f	class:Layer
back_prop	Code/5_rework_CUDA/network_scratch/network.cpp	/^void Network::back_prop(matrix* targets) {$/;"	f	class:Network
batch_size	Code/1_serial_network/utils/dataset.hpp	/^    int batch_size;$/;"	m	class:Dataset
batch_size	Code/2_cuda_network/utils/dataset.hpp	/^    int batch_size;$/;"	m	class:Dataset
batch_size	Code/5_rework_CUDA/network_scratch/network.hpp	/^        int batch_size;$/;"	m	class:Network
batch_size	Code/5_rework_CUDA/utils/dataset.hpp	/^    int batch_size;$/;"	m	class:Dataset
batch_x	Code/1_serial_network/utils/dataset.hpp	/^    float **batch_x;$/;"	m	class:Dataset
batch_x	Code/2_cuda_network/utils/dataset.hpp	/^    float **batch_x;$/;"	m	class:Dataset
batch_x	Code/5_rework_CUDA/utils/dataset.hpp	/^    float **batch_x;$/;"	m	class:Dataset
batch_y	Code/1_serial_network/utils/dataset.hpp	/^    float **batch_y;$/;"	m	class:Dataset
batch_y	Code/2_cuda_network/utils/dataset.hpp	/^    float **batch_y;$/;"	m	class:Dataset
batch_y	Code/5_rework_CUDA/utils/dataset.hpp	/^    float **batch_y;$/;"	m	class:Dataset
bias	Code/1_serial_network/layer.hpp	/^        matrix* bias;$/;"	m	class:Layer
bias	Code/2_cuda_network/layer.hpp	/^        matrix* bias;$/;"	m	class:Layer
bias	Code/5_rework_CUDA/layer.hpp	/^        matrix* bias;$/;"	m	class:Layer
correct_outputs	Code/5_rework_CUDA/network_scratch/network.hpp	/^        matrix* correct_outputs;$/;"	m	class:Network
data	Code/data/generators/generator1.py	/^data = np.concatenate((data_neg, data_pos), axis=0)$/;"	v
data_file	Code/1_serial_network/serial_test.cpp	/^const char* data_file = "..\/data\/data_n1024_m1024_mu2.0.csv";$/;"	v
data_file	Code/1_serial_network/serial_test2.cpp	/^const char* data_file = "..\/data\/wholesale_cust_mean.csv";$/;"	v
data_neg	Code/data/generators/generator1.py	/^data_neg = np.concatenate((x_neg, y_neg), axis=1)$/;"	v
data_pos	Code/data/generators/generator1.py	/^data_pos = np.concatenate((x_pos, y_pos), axis=1)$/;"	v
dataset_hpp	Code/1_serial_network/utils/dataset.hpp	/^#define dataset_hpp$/;"	d
dataset_hpp	Code/2_cuda_network/utils/dataset.hpp	/^#define dataset_hpp$/;"	d
dataset_hpp	Code/5_rework_CUDA/utils/dataset.hpp	/^#define dataset_hpp$/;"	d
del_bias	Code/1_serial_network/layer.hpp	/^        matrix* del_bias;$/;"	m	class:Layer
del_bias	Code/2_cuda_network/layer.hpp	/^        matrix* del_bias;$/;"	m	class:Layer
del_bias	Code/5_rework_CUDA/layer.hpp	/^        matrix* del_bias;$/;"	m	class:Layer
dev_alloc	Code/1_serial_network/utils/matrix.hpp	/^        bool dev_alloc;$/;"	m	class:matrix
dev_alloc	Code/5_rework_CUDA/utils/matrix.hpp	/^        bool dev_alloc;$/;"	m	class:matrix
dev_data	Code/1_serial_network/utils/matrix.hpp	/^        float* dev_data;$/;"	m	class:matrix
dev_data	Code/5_rework_CUDA/utils/matrix.hpp	/^        float* dev_data;$/;"	m	class:matrix
device_data	Code/2_cuda_network/matrix.hpp	/^        float* device_data;$/;"	m	class:matrix
device_data	Code/5_rework_CUDA/matrix.hpp	/^        float* device_data;$/;"	m	class:matrix
dim_x	Code/1_serial_network/utils/matrix.hpp	/^        int dim_x;$/;"	m	class:matrix
dim_x	Code/5_rework_CUDA/utils/matrix.hpp	/^        int dim_x;$/;"	m	class:matrix
dim_y	Code/1_serial_network/utils/matrix.hpp	/^        int dim_y;$/;"	m	class:matrix
dim_y	Code/5_rework_CUDA/utils/matrix.hpp	/^        int dim_y;$/;"	m	class:matrix
dot_prod	Code/1_serial_network/layer.cpp	/^float dot_prod(float** x, float** y, int num) {$/;"	f
fname	Code/1_serial_network/utils/dataset.hpp	/^    std::string fname;$/;"	m	class:Dataset
fname	Code/2_cuda_network/utils/dataset.hpp	/^    std::string fname;$/;"	m	class:Dataset
fname	Code/5_rework_CUDA/utils/dataset.hpp	/^    std::string fname;$/;"	m	class:Dataset
fname	Code/data/generators/generator1.py	/^fname = '..\/data_n{}_m{}_mu{}.csv'.format(n, m, mean)$/;"	v
forward	Code/5_rework_CUDA/network_scratch/network.cpp	/^void Network::forward() {$/;"	f	class:Network
forward_pass	Code/1_serial_network/layer.cpp	/^void Layer::forward_pass() {$/;"	f	class:Layer
get_batch_size	Code/1_serial_network/utils/dataset.cpp	/^int Dataset::get_batch_size() {$/;"	f	class:Dataset
get_batch_size	Code/2_cuda_network/utils/dataset.cpp	/^int Dataset::get_batch_size() {$/;"	f	class:Dataset
get_batch_size	Code/5_rework_CUDA/utils/dataset.cpp	/^int Dataset::get_batch_size() {$/;"	f	class:Dataset
get_col	Code/1_serial_network/matrix.cpp	/^float** matrix::get_col(int index) {$/;"	f	class:matrix
get_num_predictions	Code/5_rework_CUDA/network_scratch/network.cpp	/^int Network::get_num_predictions() {$/;"	f	class:Network
get_predictions	Code/5_rework_CUDA/network_scratch/network.cpp	/^float** Network::get_predictions() {$/;"	f	class:Network
get_row	Code/1_serial_network/matrix.cpp	/^float** matrix::get_row(int index) {$/;"	f	class:matrix
get_sample_order	Code/1_serial_network/utils/dataset.cpp	/^int *Dataset::get_sample_order() {$/;"	f	class:Dataset
get_sample_order	Code/2_cuda_network/utils/dataset.cpp	/^int *Dataset::get_sample_order() {$/;"	f	class:Dataset
get_sample_order	Code/5_rework_CUDA/utils/dataset.cpp	/^int *Dataset::get_sample_order() {$/;"	f	class:Dataset
header	Code/data/generators/generator1.py	/^header = '{},{}'.format(n, m)$/;"	v
hidden	Code/1_serial_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
hidden	Code/2_cuda_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
hidden	Code/5_rework_CUDA/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
host_alloc	Code/1_serial_network/utils/matrix.hpp	/^        bool host_alloc;$/;"	m	class:matrix
host_alloc	Code/5_rework_CUDA/utils/matrix.hpp	/^        bool host_alloc;$/;"	m	class:matrix
host_data	Code/1_serial_network/matrix.hpp	/^        float* host_data;$/;"	m	class:matrix
host_data	Code/1_serial_network/utils/matrix.hpp	/^        float* host_data;$/;"	m	class:matrix
host_data	Code/2_cuda_network/matrix.hpp	/^        float* host_data;$/;"	m	class:matrix
host_data	Code/5_rework_CUDA/matrix.hpp	/^        float* host_data;$/;"	m	class:matrix
host_data	Code/5_rework_CUDA/utils/matrix.hpp	/^        float* host_data;$/;"	m	class:matrix
in_del_weights	Code/1_serial_network/layer.hpp	/^        matrix* in_del_weights;$/;"	m	class:Layer
in_del_weights	Code/2_cuda_network/layer.hpp	/^        matrix* in_del_weights;$/;"	m	class:Layer
in_del_weights	Code/5_rework_CUDA/layer.hpp	/^        matrix* in_del_weights;$/;"	m	class:Layer
in_weights	Code/1_serial_network/layer.hpp	/^        matrix* in_weights;$/;"	m	class:Layer
in_weights	Code/2_cuda_network/layer.hpp	/^        matrix* in_weights;$/;"	m	class:Layer
in_weights	Code/5_rework_CUDA/layer.hpp	/^        matrix* in_weights;$/;"	m	class:Layer
input	Code/1_serial_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
input	Code/2_cuda_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
input	Code/5_rework_CUDA/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
inputs	Code/1_serial_network/layer.hpp	/^        matrix* inputs;$/;"	m	class:Layer
inputs	Code/2_cuda_network/layer.hpp	/^        matrix* inputs;$/;"	m	class:Layer
inputs	Code/5_rework_CUDA/layer.hpp	/^        matrix* inputs;$/;"	m	class:Layer
inputsT	Code/2_cuda_network/layer.hpp	/^        matrix* inputsT;$/;"	m	class:Layer
inputsT	Code/5_rework_CUDA/layer.hpp	/^        matrix* inputsT;$/;"	m	class:Layer
k	Code/1_serial_network/utils/dataset.hpp	/^    int k;$/;"	m	class:Dataset
k	Code/2_cuda_network/utils/dataset.hpp	/^    int k;$/;"	m	class:Dataset
k	Code/5_rework_CUDA/utils/dataset.hpp	/^    int k;$/;"	m	class:Dataset
layer_pos	Code/1_serial_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	g
layer_pos	Code/2_cuda_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	g
layer_pos	Code/5_rework_CUDA/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	g
layer_type	Code/5_rework_CUDA/network_scratch/network.hpp	/^typedef enum {RELU, Sigmoid, Softmax} layer_type ;$/;"	t	typeref:enum:__anon1
layers	Code/5_rework_CUDA/network_scratch/network.hpp	/^        Layer** layers;$/;"	m	class:Network
load_data	Code/1_serial_network/utils/dataset.cpp	/^void Dataset::load_data(const char* fname) {$/;"	f	class:Dataset
load_data	Code/2_cuda_network/utils/dataset.cpp	/^void Dataset::load_data(const char* fname) {$/;"	f	class:Dataset
load_data	Code/5_rework_CUDA/utils/dataset.cpp	/^void Dataset::load_data(char* fname) {$/;"	f	class:Dataset
load_next_batch	Code/1_serial_network/utils/dataset.cpp	/^void Dataset::load_next_batch() {$/;"	f	class:Dataset
load_next_batch	Code/2_cuda_network/utils/dataset.cpp	/^void Dataset::load_next_batch() {$/;"	f	class:Dataset
load_next_batch	Code/5_rework_CUDA/utils/dataset.cpp	/^void Dataset::load_next_batch() {$/;"	f	class:Dataset
lp	Code/1_serial_network/layer.hpp	/^        layer_pos lp;$/;"	m	class:Layer
lp	Code/2_cuda_network/layer.hpp	/^        layer_pos lp;$/;"	m	class:Layer
lp	Code/5_rework_CUDA/layer.hpp	/^        layer_pos lp;$/;"	m	class:Layer
m	Code/1_serial_network/utils/dataset.hpp	/^    int m;$/;"	m	class:Dataset
m	Code/2_cuda_network/utils/dataset.hpp	/^    int m;$/;"	m	class:Dataset
m	Code/5_rework_CUDA/utils/dataset.hpp	/^    int m;$/;"	m	class:Dataset
main	Code/1_serial_network/serial_test.cpp	/^int main() {$/;"	f
main	Code/1_serial_network/serial_test2.cpp	/^int main() {$/;"	f
main	Code/2_cuda_network/main.cpp	/^int main() {$/;"	f
main	Code/5_rework_CUDA/main.cpp	/^int main() {$/;"	f
main	Code/5_rework_CUDA/network_scratch/networkTest.cpp	/^int main() {$/;"	f
main	Code/5_rework_CUDA/test_scratch/matrixTest.cpp	/^int main() {$/;"	f
matrix	Code/1_serial_network/matrix.cpp	/^matrix::matrix(int rows, int cols) {$/;"	f	class:matrix
matrix	Code/1_serial_network/matrix.hpp	/^class matrix{$/;"	c
matrix	Code/1_serial_network/utils/matrix.hpp	/^class matrix {$/;"	c
matrix	Code/2_cuda_network/matrix.hpp	/^class matrix{$/;"	c
matrix	Code/5_rework_CUDA/matrix.hpp	/^class matrix{$/;"	c
matrix	Code/5_rework_CUDA/utils/matrix.hpp	/^class matrix {$/;"	c
n	Code/1_serial_network/utils/dataset.hpp	/^    int n;$/;"	m	class:Dataset
n	Code/2_cuda_network/utils/dataset.hpp	/^    int n;$/;"	m	class:Dataset
n	Code/5_rework_CUDA/utils/dataset.hpp	/^    int n;$/;"	m	class:Dataset
n_idx	Code/1_serial_network/layer.hpp	/^        matrix* n_idx;$/;"	m	class:Layer
n_idx	Code/5_rework_CUDA/layer.hpp	/^        matrix* n_idx;$/;"	m	class:Layer
next	Code/1_serial_network/layer.hpp	/^        Layer* next;$/;"	m	class:Layer
next	Code/2_cuda_network/layer.hpp	/^        Layer* next;$/;"	m	class:Layer
next	Code/5_rework_CUDA/layer.hpp	/^        Layer* next;$/;"	m	class:Layer
np	Code/data/generators/generator1.py	/^import numpy as np$/;"	i
num_cols	Code/1_serial_network/matrix.hpp	/^        int num_cols;$/;"	m	class:matrix
num_cols	Code/2_cuda_network/matrix.hpp	/^        int num_cols;$/;"	m	class:matrix
num_cols	Code/5_rework_CUDA/matrix.hpp	/^        int num_cols;$/;"	m	class:matrix
num_inputs	Code/5_rework_CUDA/network_scratch/network.hpp	/^        int num_inputs;$/;"	m	class:Network
num_layers	Code/5_rework_CUDA/network_scratch/network.hpp	/^        int num_layers;$/;"	m	class:Network
num_nodes	Code/1_serial_network/layer.hpp	/^        int num_nodes;$/;"	m	class:Layer
num_nodes	Code/2_cuda_network/layer.hpp	/^        int num_nodes;$/;"	m	class:Layer
num_nodes	Code/5_rework_CUDA/layer.hpp	/^        int num_nodes;$/;"	m	class:Layer
num_outputs	Code/5_rework_CUDA/network_scratch/network.hpp	/^        int num_outputs;$/;"	m	class:Network
num_rows	Code/1_serial_network/matrix.hpp	/^        int num_rows;$/;"	m	class:matrix
num_rows	Code/2_cuda_network/matrix.hpp	/^        int num_rows;$/;"	m	class:matrix
num_rows	Code/5_rework_CUDA/matrix.hpp	/^        int num_rows;$/;"	m	class:matrix
num_vals	Code/1_serial_network/matrix.hpp	/^        int num_vals;$/;"	m	class:matrix
num_vals	Code/2_cuda_network/matrix.hpp	/^        int num_vals;$/;"	m	class:matrix
num_vals	Code/5_rework_CUDA/matrix.hpp	/^        int num_vals;$/;"	m	class:matrix
on_device	Code/2_cuda_network/matrix.hpp	/^        int on_device;$/;"	m	class:matrix
on_device	Code/5_rework_CUDA/matrix.hpp	/^        int on_device;$/;"	m	class:matrix
out_del_weights	Code/1_serial_network/layer.hpp	/^        matrix* out_del_weights;$/;"	m	class:Layer
out_del_weights	Code/2_cuda_network/layer.hpp	/^        matrix* out_del_weights;$/;"	m	class:Layer
out_del_weights	Code/5_rework_CUDA/layer.hpp	/^        matrix* out_del_weights;$/;"	m	class:Layer
out_weights	Code/1_serial_network/layer.hpp	/^        matrix* out_weights;$/;"	m	class:Layer
out_weights	Code/2_cuda_network/layer.hpp	/^        matrix* out_weights;$/;"	m	class:Layer
out_weights	Code/5_rework_CUDA/layer.hpp	/^        matrix* out_weights;$/;"	m	class:Layer
out_weightsT	Code/2_cuda_network/layer.hpp	/^        matrix* out_weightsT;$/;"	m	class:Layer
out_weightsT	Code/5_rework_CUDA/layer.hpp	/^        matrix* out_weightsT;$/;"	m	class:Layer
output	Code/1_serial_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
output	Code/2_cuda_network/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
output	Code/5_rework_CUDA/layer.hpp	/^enum layer_pos {input, hidden, output};$/;"	e	enum:layer_pos
outputs	Code/1_serial_network/layer.hpp	/^        matrix* outputs;$/;"	m	class:Layer
outputs	Code/2_cuda_network/layer.hpp	/^        matrix* outputs;$/;"	m	class:Layer
outputs	Code/5_rework_CUDA/layer.hpp	/^        matrix* outputs;$/;"	m	class:Layer
outputs_temp	Code/5_rework_CUDA/network_scratch/network.hpp	/^        matrix* outputs_temp;$/;"	m	class:Network
position	Code/1_serial_network/utils/dataset.hpp	/^    int position;$/;"	m	class:Dataset
position	Code/2_cuda_network/utils/dataset.hpp	/^    int position;$/;"	m	class:Dataset
position	Code/5_rework_CUDA/utils/dataset.hpp	/^    int position;$/;"	m	class:Dataset
prev	Code/1_serial_network/layer.hpp	/^        Layer* prev;$/;"	m	class:Layer
prev	Code/2_cuda_network/layer.hpp	/^        Layer* prev;$/;"	m	class:Layer
prev	Code/5_rework_CUDA/layer.hpp	/^        Layer* prev;$/;"	m	class:Layer
print	Code/1_serial_network/matrix.cpp	/^void matrix::print() {$/;"	f	class:matrix
print_bias	Code/5_rework_CUDA/layer.hpp	/^        void print_bias() { bias->print(); }$/;"	f	class:Layer
print_del_bias	Code/5_rework_CUDA/layer.hpp	/^        void print_del_bias() { del_bias->print(); }$/;"	f	class:Layer
print_f_arr	Code/5_rework_CUDA/network_scratch/network.cpp	/^void print_f_arr(float* f, int n) {$/;"	f
print_in_del_W	Code/5_rework_CUDA/layer.hpp	/^        void print_in_del_W() { in_del_weights->print(); }$/;"	f	class:Layer
print_in_weights	Code/5_rework_CUDA/layer.hpp	/^        void print_in_weights() { in_weights->print(); }$/;"	f	class:Layer
print_inputs	Code/5_rework_CUDA/layer.hpp	/^        void print_inputs() { inputs->print(); }$/;"	f	class:Layer
print_intarray2	Code/1_serial_network/utils/dataset.cpp	/^void print_intarray2(int *arr, int len) {$/;"	f
print_intarray2	Code/5_rework_CUDA/utils/dataset.cpp	/^void print_intarray2(int *arr, int len) {$/;"	f
print_layer	Code/1_serial_network/layer.cpp	/^void Layer::print_layer() {$/;"	f	class:Layer
print_out_del_W	Code/5_rework_CUDA/layer.hpp	/^        void print_out_del_W() { out_del_weights->print(); }$/;"	f	class:Layer
print_out_weights	Code/5_rework_CUDA/layer.hpp	/^        void print_out_weights() { out_weights->print(); }$/;"	f	class:Layer
print_outputs	Code/5_rework_CUDA/layer.hpp	/^        void print_outputs() { outputs->print(); }$/;"	f	class:Layer
raw_outputs	Code/2_cuda_network/layer.hpp	/^        matrix* raw_outputs;$/;"	m	class:Layer
raw_outputs	Code/5_rework_CUDA/layer.hpp	/^        matrix* raw_outputs;$/;"	m	class:Layer
sample_order	Code/1_serial_network/utils/dataset.hpp	/^    int *sample_order;$/;"	m	class:Dataset
sample_order	Code/2_cuda_network/utils/dataset.hpp	/^    int *sample_order;$/;"	m	class:Dataset
sample_order	Code/5_rework_CUDA/utils/dataset.hpp	/^    int *sample_order;$/;"	m	class:Dataset
set_bias	Code/1_serial_network/layer.hpp	/^        void set_bias(float* b) { bias->set_memory(b); }$/;"	f	class:Layer
set_bias	Code/2_cuda_network/layer.hpp	/^        void set_bias(float* b) { bias->set_memory(b); }$/;"	f	class:Layer
set_bias	Code/5_rework_CUDA/layer.hpp	/^        void set_bias(float* b) { bias->set_memory(b); }$/;"	f	class:Layer
set_input	Code/5_rework_CUDA/network_scratch/network.cpp	/^void Network::set_input(float* ins) {$/;"	f	class:Network
set_mem_random	Code/1_serial_network/matrix.cpp	/^void matrix::set_mem_random() {$/;"	f	class:matrix
set_mem_zero	Code/1_serial_network/matrix.cpp	/^void matrix::set_mem_zero() {$/;"	f	class:matrix
set_memory	Code/1_serial_network/matrix.cpp	/^void matrix::set_memory(float* new_vals) {$/;"	f	class:matrix
set_next_layer	Code/1_serial_network/layer.cpp	/^void Layer::set_next_layer(Layer* next_layer) {$/;"	f	class:Layer
set_output	Code/1_serial_network/layer.hpp	/^        void set_output(float* ins) { outputs->set_memory(ins); }$/;"	f	class:Layer
set_output	Code/2_cuda_network/layer.hpp	/^        void set_output(float* ins) { outputs->set_memory(ins); }$/;"	f	class:Layer
set_output	Code/5_rework_CUDA/layer.hpp	/^        void set_output(float* ins) { outputs->set_memory(ins); }$/;"	f	class:Layer
set_weights	Code/1_serial_network/layer.hpp	/^        void set_weights(float* w) { out_weights->set_memory(w); }$/;"	f	class:Layer
set_weights	Code/2_cuda_network/layer.hpp	/^        void set_weights(float* w) { out_weights->set_memory(w); }$/;"	f	class:Layer
set_weights	Code/5_rework_CUDA/layer.hpp	/^        void set_weights(float* w) { out_weights->set_memory(w); }$/;"	f	class:Layer
shuffle_sample_order	Code/1_serial_network/utils/dataset.cpp	/^void Dataset::shuffle_sample_order() {$/;"	f	class:Dataset
shuffle_sample_order	Code/2_cuda_network/utils/dataset.cpp	/^void Dataset::shuffle_sample_order() {$/;"	f	class:Dataset
shuffle_sample_order	Code/5_rework_CUDA/utils/dataset.cpp	/^void Dataset::shuffle_sample_order() {$/;"	f	class:Dataset
sys	Code/data/generators/generator1.py	/^import sys$/;"	i
train	Code/5_rework_CUDA/network_scratch/network.cpp	/^void Network::train(int num_epochs, int batch_size, float learn_rate, float min_err) {$/;"	f	class:Network
update	Code/1_serial_network/layer.cpp	/^void Layer::update(float learn_rate, int batch_size) {$/;"	f	class:Layer
update_weights	Code/5_rework_CUDA/network_scratch/network.cpp	/^void Network::update_weights(float learn_rate, int batch_size) {$/;"	f	class:Network
w_idx	Code/1_serial_network/layer.hpp	/^        matrix* w_idx;$/;"	m	class:Layer
w_idx	Code/5_rework_CUDA/layer.hpp	/^        matrix* w_idx;$/;"	m	class:Layer
x	Code/1_serial_network/utils/dataset.hpp	/^    float **x;$/;"	m	class:Dataset
x	Code/2_cuda_network/utils/dataset.hpp	/^    float **x;$/;"	m	class:Dataset
x	Code/5_rework_CUDA/utils/dataset.hpp	/^    float **x;$/;"	m	class:Dataset
x_neg	Code/data/generators/generator1.py	/^x_neg = np.random.normal(loc=-mean, scale=std, size=(int(n\/2), m))$/;"	v
x_pos	Code/data/generators/generator1.py	/^x_pos = np.random.normal(loc=mean, scale=std, size=(int(n\/2), m))$/;"	v
y	Code/1_serial_network/utils/dataset.hpp	/^    float **y;$/;"	m	class:Dataset
y	Code/2_cuda_network/utils/dataset.hpp	/^    float **y;$/;"	m	class:Dataset
y	Code/5_rework_CUDA/utils/dataset.hpp	/^    float **y;$/;"	m	class:Dataset
y_neg	Code/data/generators/generator1.py	/^y_neg = np.empty((int(n\/2), 1))$/;"	v
y_pos	Code/data/generators/generator1.py	/^y_pos = np.empty((int(n\/2), 1))$/;"	v
zero_grad	Code/1_serial_network/layer.cpp	/^void Layer::zero_grad() {$/;"	f	class:Layer
zero_grad	Code/5_rework_CUDA/network_scratch/network.cpp	/^void Network::zero_grad() {$/;"	f	class:Network
~Dataset	Code/1_serial_network/utils/dataset.cpp	/^Dataset::~Dataset() {$/;"	f	class:Dataset
~Dataset	Code/2_cuda_network/utils/dataset.cpp	/^Dataset::~Dataset() {$/;"	f	class:Dataset
~Dataset	Code/5_rework_CUDA/utils/dataset.cpp	/^Dataset::~Dataset() {$/;"	f	class:Dataset
~matrix	Code/1_serial_network/matrix.cpp	/^matrix::~matrix() {$/;"	f	class:matrix
